use anyhow::{bail, Result};
use core::str;
use std::default;
use embedded_svc::{
    http::{client::Client},
};
use esp_idf_hal::prelude::Peripherals;
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    http::client::{Configuration, EspHttpConnection},
};
use wifi::wifi;

// If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use esp_idf_sys as _;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    esp_idf_sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    get("http://www.testingmcafeesites.com/testcat_ac.html")?;

    Ok(())
}

fn get(url: impl AsRef<str>) -> Result<()> {
    // 1. Create a new EspHttpConnection with default Configuration. (Check documentation)
    let http_conn = EspHttpConnection::new(&Default::default()).unwrap();
    // 2. Get a client using the Client::wrap method. (Check documentation)
    let mut my_client = Client::wrap(http_conn);
    // 3. Open a GET request to `url`
    if let Ok(req) = my_client.get(url.as_ref()) {
        let response = req.submit();
        match response {
            Ok(mut resp) => {
                println!("Response Code: {}",resp.status());
                match resp.status() {
                    200..=299 => {
                        println!("looks successful");
                        // read response data
                        let mut buffer = Vec::with_capacity(100);
                        resp.read(&mut buffer)?;
                        // converting into rust string
                        println!("{:?}",String::from_utf8(buffer));
                    }
                    _ => {
                        println!("something went wrong");
                    }
                }
            }
            Err(_) => {}
        }
    };

    // 4. Submit the request and check the status code of the response.
    // let response = request...;
    // let status = ...;
    // println!("Response code: {}\n", status);
    // match status {
    // Successful http status codes are in the 200..=299 range.

    // 5. If the status is OK, read response data chunk by chunk into a buffer and print it until done.

    // 6. Try converting the bytes into a Rust (UTF-8) string and print it.
    // }

    Ok(())
}
